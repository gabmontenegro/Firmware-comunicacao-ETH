<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\STM32_Blink_LED.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\STM32_Blink_LED.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 26 13:00:08 2019
<BR><P>
<H3>Maximum Stack Usage =       2256 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*) &rArr; WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[1a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">PendSV_Handler</a><BR>
 <LI><a href="#[1b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SysTick_Handler</a><BR>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1e2]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[228]">mbed_die</a><BR>
 <LI><a href="#[1e7]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">init_uart</a><BR>
 <LI><a href="#[235]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">error</a><BR>
 <LI><a href="#[176]">Set_GPIO_Clock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">error</a><BR>
 <LI><a href="#[230]">pin_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e2]">mbed_assert_internal</a><BR>
 <LI><a href="#[22c]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e2]">mbed_assert_internal</a><BR>
 <LI><a href="#[237]">pinmap_pinout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">error</a><BR>
 <LI><a href="#[236]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[177]">error</a><BR>
 <LI><a href="#[1ec]">core_util_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e2]">mbed_assert_internal</a><BR>
 <LI><a href="#[233]">mbed_error_printf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ea]">core_util_critical_section_enter</a><BR>
 <LI><a href="#[df]">exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">fflush</a><BR>
 <LI><a href="#[215]">dnsname::decode(int)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[215]">dnsname::decode(int)</a><BR>
 <LI><a href="#[21f]">UDPSocket::readEndpoint(Endpoint&, unsigned char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">Endpoint::set_address(const char*, int)</a><BR>
 <LI><a href="#[21b]">DNSClient::resolve(const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18b]">Endpoint::set_address(const char*, int)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[62]">&lang;Func3&rang;</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i.<Func3>) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">CAN1_RX1_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">CAN1_SCE_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.CAN1_SCE_IRQHandler) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">RTC_Alarm_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[56]">SPI_2linesRxISR_16BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[5d]">SPI_2linesRxISR_16BITCRC</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BITCRC) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BIT)
 <LI><a href="#[57]">SPI_2linesRxISR_8BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[5e]">SPI_2linesRxISR_8BITCRC</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BITCRC) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BIT)
 <LI><a href="#[58]">SPI_2linesTxISR_16BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesTxISR_16BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[59]">SPI_2linesTxISR_8BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesTxISR_8BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[53]">SPI_DMAAbortOnError</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[54]">SPI_RxISR_16BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_16BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[5f]">SPI_RxISR_16BITCRC</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_16BITCRC) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_16BIT)
 <LI><a href="#[55]">SPI_RxISR_8BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_8BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[60]">SPI_RxISR_8BITCRC</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_8BITCRC) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_8BIT)
 <LI><a href="#[5a]">SPI_TxISR_16BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_TxISR_16BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[5b]">SPI_TxISR_8BIT</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_TxISR_8BIT) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[18]">SVC_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/system_stm32f1xx.o(i.SystemInit) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text)
 <LI><a href="#[1e]">TAMPER_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[5c]">UART_DMAAbortOnError</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[41]">USART1_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">USBWakeUp_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USB_HP_CAN1_TX_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USB_LP_CAN1_RX0_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(RESET)
 <LI><a href="#[76]">Rx_interrupt()</a> from .\build\main.o(i._Z12Rx_interruptv) referenced from .\build\main.o(i.main)
 <LI><a href="#[77]">read_rtc()</a> from .\build\main.o(i._Z8read_rtcv) referenced from .\build\main.o(i.main)
 <LI><a href="#[6e]">EthernetFunctions::~EthernetFunctions()</a> from .\build\main.o(i._ZN17EthernetFunctionsD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led)
 <LI><a href="#[83]">mbed::FileHandle::size()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(i._ZN4mbed10FileHandle4sizeEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[82]">mbed::FileHandle::isatty()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(i._ZN4mbed10FileHandle6isattyEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[64]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[7a]">mbed::SerialBase::interrupt_handler_asynch()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(.constdata)
 <LI><a href="#[84]">mbed::SerialBase::lock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase4lockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[85]">mbed::SerialBase::unlock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase6unlockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[66]">mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInC1E7PinName)
 <LI><a href="#[6c]">mbed::InterruptIn::~InterruptIn()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInD1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(.constdata__ZTVN4mbed11InterruptInE)
 <LI><a href="#[6c]">mbed::InterruptIn::~InterruptIn()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led)
 <LI><a href="#[6a]">mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEEC1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[78]">mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEED1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
 <LI><a href="#[6b]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[79]">mbed::SPI::irq_handler_asynch()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI18irq_handler_asynchEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.constdata)
 <LI><a href="#[87]">mbed::SPI::lock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI4lockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[86]">mbed::SPI::write(int)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI5writeEi) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[88]">mbed::SPI::unlock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI6unlockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[6d]">mbed::SPI::~SPI()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPID1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[6d]">mbed::SPI::~SPI()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPID1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led)
 <LI><a href="#[89]">mbed::Serial::lock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6Serial4lockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8a]">mbed::Serial::unlock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6Serial6unlockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[69]">mbed::Serial::~Serial()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[69]">mbed::Serial::~Serial()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev) referenced from .\build\serialconnect.o(i.__sti___17_SerialConnect_cpp_ebddc1ff)
 <LI><a href="#[69]">mbed::Serial::~Serial()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_led)
 <LI><a href="#[96]">mbed::Stream::lock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4lockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8b]">mbed::Stream::read(void*, unsigned)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4readEPvj) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8b]">mbed::Stream::read(void*, unsigned)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4readEPvj) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8d]">mbed::Stream::seek(long, int)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4seekEli) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8d]">mbed::Stream::seek(long, int)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4seekEli) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[90]">mbed::Stream::size()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4sizeEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[90]">mbed::Stream::size()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4sizeEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8e]">mbed::Stream::close()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5closeEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8e]">mbed::Stream::close()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5closeEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8c]">mbed::Stream::write(const void*, unsigned)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5writeEPKvj) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8c]">mbed::Stream::write(const void*, unsigned)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5writeEPKvj) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[8f]">mbed::Stream::isatty()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6isattyEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[8f]">mbed::Stream::isatty()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6isattyEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[97]">mbed::Stream::unlock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6unlockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[95]">mbed::Stream::~Stream__sub_object()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6StreamD2Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[99]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[9b]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[9a]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[68]">mbed::Callback&lang;void()&rang;::~Callback()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev)
 <LI><a href="#[98]">mbed::FileBase::~FileBase()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBaseD1Ev) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[63]">mbed::donothing()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed9donothingEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[65]">mbed::donothing()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed9donothingEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE)
 <LI><a href="#[65]">mbed::donothing()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed9donothingEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInC1E7PinName)
 <LI><a href="#[61]">CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[67]">CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_)
 <LI><a href="#[80]">DNSClient::~DNSClient()</a> from .\build\dnsclient.o(i._ZN9DNSClientD1Ev) referenced from .\build\dnsclient.o(.constdata__ZTV9DNSClient)
 <LI><a href="#[93]">thunk{-188} to mbed::Serial::lock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial4lockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[92]">thunk{-188} to mbed::Serial::_getc()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial5_getcEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[91]">thunk{-188} to mbed::Serial::_putc(int)</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial5_putcEi) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[94]">thunk{-188} to mbed::Serial::unlock()</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial6unlockEv) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 2 times from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a3]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text)
 <LI><a href="#[9d]">__sti___17_SerialConnect_cpp_ebddc1ff</a> from .\build\serialconnect.o(i.__sti___17_SerialConnect_cpp_ebddc1ff) referenced from .\build\serialconnect.o(.init_array)
 <LI><a href="#[9e]">__sti___7_SPI_cpp_ab1f1164</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i.__sti___7_SPI_cpp_ab1f1164) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(.init_array)
 <LI><a href="#[9c]">__sti___8_main_cpp_led</a> from .\build\main.o(i.__sti___8_main_cpp_led) referenced from .\build\main.o(.init_array)
 <LI><a href="#[51]">_get_lc_ctype</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[4d]">_printf_input_char</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[4c]">_sbackspace</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text)
 <LI><a href="#[4f]">_scanf_char_input</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[4b]">_sgetc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text)
 <LI><a href="#[49]">_snputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced 2 times from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[4a]">_sputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2sprintf.o)(.text)
 <LI><a href="#[4e]">fputc</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text)
 <LI><a href="#[6f]">gpio_irq0</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq0) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[70]">gpio_irq1</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq1) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[71]">gpio_irq2</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq2) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[72]">gpio_irq3</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq3) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[73]">gpio_irq4</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq4) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[74]">gpio_irq5</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq5) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[75]">gpio_irq6</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq6) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init)
 <LI><a href="#[50]">isspace</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(isspace.o)(.text) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text)
 <LI><a href="#[9f]">rtc_init</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_init) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(.data)
 <LI><a href="#[a0]">rtc_isenabled</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_isenabled) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(.data)
 <LI><a href="#[a1]">rtc_read</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_read) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(.data)
 <LI><a href="#[a2]">rtc_write</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_write) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(.data)
 <LI><a href="#[52]">timer_irq_handler</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/hal_tick_16b.o(i.timer_irq_handler) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/hal_tick_16b.o(i.HAL_InitTick)
 <LI><a href="#[7e]">us_ticker_clear_interrupt</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_clear_interrupt) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(.constdata)
 <LI><a href="#[7d]">us_ticker_disable_interrupt</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_disable_interrupt) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(.constdata)
 <LI><a href="#[7b]">us_ticker_init</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_init) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(.constdata)
 <LI><a href="#[7c]">us_ticker_read</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_read) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(.constdata)
 <LI><a href="#[7f]">us_ticker_set_interrupt</a> from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_set_interrupt) referenced from mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a3]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[246]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[247]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[a8]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_copy.o)(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[248]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[a9]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[f3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ab]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ad]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[af]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b0]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[249]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[b3]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b7]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[bb]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bf]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[c1]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[24a]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[c3]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[c7]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c9]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[24b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[dc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[24c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[24d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[24f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[250]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[251]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[252]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[253]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[254]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[255]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[256]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[257]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[258]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[259]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[25a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[25b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[25d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[260]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry.o)(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[261]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry4.o)(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[262]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*) &rArr; WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[263]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19d]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rand.o)(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::query(unsigned char*, int, const char*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::discover()
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[264]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(maybetermalloc1.o)(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[265]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::dnsname(unsigned char*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pico_string::append(const char*, int)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[e3]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::~dnsname()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pico_string::append(const char*, int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>

<P><STRONG><a name="[267]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludivv7m.o)(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[e6]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[e8]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2sprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[e9]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2snprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getNetworkMask()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getMACAddress()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getIPAddress()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getGateway()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::readEndpoint(Endpoint&, unsigned char*)
</UL>

<P><STRONG><a name="[eb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[ec]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[ea]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[f0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ba]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[c2]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[ac]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[f1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f4]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__0sscanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[f6]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf_int.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[f8]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(atoi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_ip(const char*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*)
</UL>

<P><STRONG><a name="[fb]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[fe]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[ff]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[102]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[104]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[100]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[20a]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[107]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rand.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[ce]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rand.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1bb]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strchr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::encode(int, char*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*)
</UL>

<P><STRONG><a name="[195]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::verify(unsigned char*, int)
</UL>

<P><STRONG><a name="[17f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeraVetor(char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::encode(int, char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::decode(int)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[20d]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::encode(int, char*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pico_string::append(const char*, int)
</UL>

<P><STRONG><a name="[108]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[268]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_v6.o)(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[269]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(aeabi_memset.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[26c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1a7]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a4]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_dtor_noexceptions.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>

<P><STRONG><a name="[e1]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[26e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[10e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[cc]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[111]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ee]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ef]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[e5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c4]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[c6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e7]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[114]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[bc]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[117]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b8]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[c0]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[f7]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[f5]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtol.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[113]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ferror.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[11b]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[122]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[11e]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[229]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[270]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[22a]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[271]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[272]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[105]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setvbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[11d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[126]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fc]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[11f]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[d5]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[12a]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[12b]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[119]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[10d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_extend.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[116]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[50]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(isspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[274]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[138]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[139]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c8]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ca]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[118]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_scanf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[11a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_strtoul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[127]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[275]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[121]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flushlinebuffered.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[115]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[12d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[129]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[10f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[12c]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[110]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[10c]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[13a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[d0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_locale.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[137]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[131]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[13b]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[13c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[13e]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[276]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[132]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[13f]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[141]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[142]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[133]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[134]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[143]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[de]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_sdk_boot.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*) &rArr; WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[32]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[244]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[147]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[149]"></a>HAL_InitTick</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/hal_tick_16b.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[238]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[153]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[178]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[150]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[279]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq), UNUSED)

<P><STRONG><a name="[154]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 908 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[155]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[156]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_GetTime &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[15a]"></a>HAL_RTC_Init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteTimeCounter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteAlarmCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
</UL>

<P><STRONG><a name="[160]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[15e]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
</UL>

<P><STRONG><a name="[161]"></a>HAL_SPI_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[162]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[172]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[164]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[241]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[174]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
</UL>

<P><STRONG><a name="[171]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[165]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[245]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.HAL_TIM_GenerateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[169]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[167]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 678 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[16b]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[16c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>SPI_ISCRCErrorValid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi_ex.o(i.SPI_ISCRCErrorValid))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[175]"></a>SetSysClock</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/system_stm32f1xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetSysClock &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[176]"></a>Set_GPIO_Clock</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_api.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[14b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/system_stm32f1xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>checkOpcode(unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, .\build\main.o(i._Z11checkOpcodeh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_interrupt()
</UL>

<P><STRONG><a name="[76]"></a>Rx_interrupt()</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, .\build\main.o(i._Z12Rx_interruptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Rx_interrupt() &rArr; mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeraVetor(char*)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkOpcode(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[77]"></a>read_rtc()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\main.o(i._Z8read_rtcv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[17d]"></a>str_to_ip(const char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\w5500.o(i._Z9str_to_ipPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = str_to_ip(const char*) &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
</UL>

<P><STRONG><a name="[17c]"></a>zeraVetor(char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\main.o(i._Z9zeraVetorPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = zeraVetor(char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_interrupt()
</UL>

<P><STRONG><a name="[180]"></a>DHCPClient::add_option(unsigned char, unsigned char*, int)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient10add_optionEhPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHCPClient::add_option(unsigned char, unsigned char*, int) &rArr; DHCPClient::add_buf(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::request()
</UL>

<P><STRONG><a name="[19b]"></a>DHCPClient::offer(unsigned char*, int)</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient5offerEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DHCPClient::offer(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
</UL>

<P><STRONG><a name="[183]"></a>DHCPClient::setup(int)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient5setupEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::~Socket()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::UDPSocket()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::init()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::discover()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::set_blocking(bool, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::IPrenew(int)
</UL>

<P><STRONG><a name="[194]"></a>DHCPClient::verify(unsigned char*, int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient6verifyEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPClient::verify(unsigned char*, int) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
</UL>

<P><STRONG><a name="[182]"></a>DHCPClient::add_buf(unsigned char*, int)</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient7add_bufEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DHCPClient::add_buf(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::discover()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::request()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_option(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[181]"></a>DHCPClient::add_buf(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient7add_bufEh))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::fill_buf(int, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char*, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_option(unsigned char, unsigned char*, int)
</UL>

<P><STRONG><a name="[196]"></a>DHCPClient::request()</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient7requestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DHCPClient::request() &rArr; DHCPClient::add_option(unsigned char, unsigned char*, int) &rArr; DHCPClient::add_buf(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::fill_buf(int, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char*, int)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_option(unsigned char, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
</UL>

<P><STRONG><a name="[190]"></a>DHCPClient::callback()</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient8callbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = DHCPClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::~Endpoint()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::receiveFrom(Endpoint&, char*, int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::request()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::verify(unsigned char*, int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::offer(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[18c]"></a>DHCPClient::discover()</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient8discoverEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = DHCPClient::discover() &rArr; time &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::fill_buf(int, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char*, int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[197]"></a>DHCPClient::fill_buf(int, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\dhcpclient.o(i._ZN10DHCPClient8fill_bufEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DHCPClient::fill_buf(int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::add_buf(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::discover()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::request()
</UL>

<P><STRONG><a name="[19e]"></a>DHCPClient::DHCPClient()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\dhcpclient.o(i._ZN10DHCPClientC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = DHCPClient::DHCPClient() &rArr; mbed::Timer::Timer() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::IPrenew(int)
</UL>

<P><STRONG><a name="[27a]"></a>DHCPClient::DHCPClient__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\dhcpclient.o(i._ZN10DHCPClientC1Ev), UNUSED)

<P><STRONG><a name="[1a0]"></a>DHCPClient::~DHCPClient()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\wiznetinterface.o(i._ZN10DHCPClientD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHCPClient::~DHCPClient()
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::~Endpoint()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::IPrenew(int)
</UL>

<P><STRONG><a name="[27b]"></a>DHCPClient::~DHCPClient__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\wiznetinterface.o(i._ZN10DHCPClientD1Ev), UNUSED)

<P><STRONG><a name="[1a1]"></a>WIZnet_Chip::new_socket()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip10new_socketEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WIZnet_Chip::new_socket() &rArr; T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::init()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
</UL>

<P><STRONG><a name="[1a3]"></a>WIZnet_Chip::setProtocol(int, Protocol)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip11setProtocolEi8Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WIZnet_Chip::setProtocol(int, Protocol) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::init()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
</UL>

<P><STRONG><a name="[1a5]"></a>WIZnet_Chip::is_connected(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip12is_connectedEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WIZnet_Chip::is_connected(int) &rArr; T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::is_connected()
</UL>

<P><STRONG><a name="[1a6]"></a>WIZnet_Chip::gethostbyname(const char*, unsigned*)</STRONG> (Thumb, 106 bytes, Stack size 120 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip13gethostbynameEPKcPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::~DNSClient()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::DNSClient(const char*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::lookup(const char*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_ip(const char*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
</UL>

<P><STRONG><a name="[1aa]"></a>WIZnet_Chip::wait_readable(int, int, int)</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip13wait_readableEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::receive(char*, int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::receiveFrom(Endpoint&, char*, int)
</UL>

<P><STRONG><a name="[1ad]"></a>WIZnet_Chip::wait_writeable(int, int, int)</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip14wait_writeableEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = WIZnet_Chip::wait_writeable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::send_all(char*, int)
</UL>

<P><STRONG><a name="[1ae]"></a>WIZnet_Chip::is_fin_received(int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip15is_fin_receivedEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WIZnet_Chip::is_fin_received(int) &rArr; T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::is_fin_received()
</UL>

<P><STRONG><a name="[1af]"></a>WIZnet_Chip::recv(int, char*, int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip4recvEiPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WIZnet_Chip::recv(int, char*, int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::receive(char*, int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::receiveFrom(Endpoint&, char*, int)
</UL>

<P><STRONG><a name="[1b1]"></a>WIZnet_Chip::scmd(int, Command)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip4scmdEi7Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::close(int)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::listen(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
</UL>

<P><STRONG><a name="[1b2]"></a>WIZnet_Chip::send(int, const char*, int)</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip4sendEiPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = WIZnet_Chip::send(int, const char*, int) &rArr; WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::close(int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::send_all(char*, int)
</UL>

<P><STRONG><a name="[1b4]"></a>WIZnet_Chip::close(int)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip5closeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::close()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
</UL>

<P><STRONG><a name="[1b5]"></a>WIZnet_Chip::reset()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WIZnet_Chip::reset() &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::init(unsigned char*)
</UL>

<P><STRONG><a name="[1b9]"></a>WIZnet_Chip::setip()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip5setipEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = WIZnet_Chip::setip() &rArr; void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::connect()
</UL>

<P><STRONG><a name="[184]"></a>WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip8spi_readEthPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getMACAddress()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned&rang;(int, unsigned short)
</UL>

<P><STRONG><a name="[1ba]"></a>WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, .\build\udpsocket.o(i._ZN11WIZnet_Chip9reg_wr_ipEthPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*) &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::confEndpoint(Endpoint&)
</UL>

<P><STRONG><a name="[1b3]"></a>WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, .\build\w5500.o(i._ZN11WIZnet_Chip9spi_writeEthPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
</UL>

<P><STRONG><a name="[1bc]"></a>WIZnet_Chip::WIZnet_Chip(mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\w5500.o(i._ZN11WIZnet_ChipC1EPN4mbed3SPIE7PinNameS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WIZnet_Chip::WIZnet_Chip(mbed::SPI*, PinName, PinName) &rArr; mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::WIZnetInterface(mbed::SPI*, PinName, PinName)
</UL>

<P><STRONG><a name="[27c]"></a>WIZnet_Chip::WIZnet_Chip__sub_object(mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\w5500.o(i._ZN11WIZnet_ChipC1EPN4mbed3SPIE7PinNameS3_), UNUSED)

<P><STRONG><a name="[1be]"></a>pico_string::append(const char*, int)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\build\dnsclient.o(i._ZN11pico_string6appendEPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pico_string::append(const char*, int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::decode(int)
</UL>

<P><STRONG><a name="[1c0]"></a>TCPSocketServer::bind(int)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\tcpsocketserver.o(i._ZN15TCPSocketServer4bindEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TCPSocketServer::bind(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::new_socket()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setProtocol(int, Protocol)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[1c1]"></a>TCPSocketServer::accept(TCPSocketConnection&)</STRONG> (Thumb, 304 bytes, Stack size 104 bytes, .\build\tcpsocketserver.o(i._ZN15TCPSocketServer6acceptER19TCPSocketConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = TCPSocketServer::accept(TCPSocketConnection&) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::listen(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::sreg&lang;unsigned&rang;(int, unsigned short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::~Timer()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
</UL>

<P><STRONG><a name="[1c3]"></a>TCPSocketServer::listen(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\tcpsocketserver.o(i._ZN15TCPSocketServer6listenEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TCPSocketServer::listen(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[1c4]"></a>TCPSocketServer::TCPSocketServer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\tcpsocketserver.o(i._ZN15TCPSocketServerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TCPSocketServer::TCPSocketServer() &rArr; Socket::Socket() &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::Socket()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::EthernetFunctions()
</UL>

<P><STRONG><a name="[27d]"></a>TCPSocketServer::TCPSocketServer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\tcpsocketserver.o(i._ZN15TCPSocketServerC1Ev), UNUSED)

<P><STRONG><a name="[1c6]"></a>WIZnetInterface::getGateway()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface10getGatewayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::getGateway() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1c8]"></a>WIZnetInterface::getIPAddress()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface12getIPAddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::getIPAddress() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1c9]"></a>WIZnetInterface::getMACAddress()</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface13getMACAddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::getMACAddress() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1ca]"></a>WIZnetInterface::getNetworkMask()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface14getNetworkMaskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::getNetworkMask() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1cb]"></a>WIZnetInterface::init(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface4initEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WIZnetInterface::init(unsigned char*) &rArr; WIZnet_Chip::reset() &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1cc]"></a>WIZnetInterface::IPrenew(int)</STRONG> (Thumb, 176 bytes, Stack size 728 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface7IPrenewEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::~DHCPClient()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::DHCPClient()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::connect()
</UL>

<P><STRONG><a name="[1cd]"></a>WIZnetInterface::connect()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterface7connectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setip()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::IPrenew(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[1ce]"></a>WIZnetInterface::WIZnetInterface(mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterfaceC1EPN4mbed3SPIE7PinNameS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = WIZnetInterface::WIZnetInterface(mbed::SPI*, PinName, PinName) &rArr; mbed::SPI::frequency(int) &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::WIZnet_Chip(mbed::SPI*, PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
</UL>

<P><STRONG><a name="[27e]"></a>WIZnetInterface::WIZnetInterface__sub_object(mbed::SPI*, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\wiznetinterface.o(i._ZN15WIZnetInterfaceC1EPN4mbed3SPIE7PinNameS3_), UNUSED)

<P><STRONG><a name="[1d0]"></a>EthernetFunctions::ConnectClient()</STRONG> (Thumb, 94 bytes, Stack size 232 bytes, .\build\ethernetconnect.o(i._ZN17EthernetFunctions13ConnectClientEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = EthernetFunctions::ConnectClient() &rArr; TCPSocketServer::accept(TCPSocketConnection&) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::get_address()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::set_blocking(bool, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d5]"></a>EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)</STRONG> (Thumb, 210 bytes, Stack size 264 bytes, .\build\ethernetconnect.o(i._ZN17EthernetFunctions13ConnectServerEPhP15WIZnetInterfacePKcS4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224 + Unknown Stack Size
<LI>Call Chain = EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*) &rArr; WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::connect()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::init(unsigned char*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getNetworkMask()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getMACAddress()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getIPAddress()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getGateway()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::listen(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d6]"></a>EthernetFunctions::write(char*, int)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, .\build\ethernetconnect.o(i._ZN17EthernetFunctions5writeEPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = EthernetFunctions::write(char*, int) &rArr; TCPSocketConnection::send_all(char*, int) &rArr; WIZnet_Chip::wait_writeable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::is_connected()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::send_all(char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d9]"></a>EthernetFunctions::EthernetFunctions()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\ethernetconnect.o(i._ZN17EthernetFunctionsC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = EthernetFunctions::EthernetFunctions() &rArr; TCPSocketConnection::TCPSocketConnection() &rArr; Socket::Socket() &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::TCPSocketConnection()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::TCPSocketServer()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
</UL>

<P><STRONG><a name="[27f]"></a>EthernetFunctions::EthernetFunctions__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\ethernetconnect.o(i._ZN17EthernetFunctionsC1Ev), UNUSED)

<P><STRONG><a name="[6e]"></a>EthernetFunctions::~EthernetFunctions()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\main.o(i._ZN17EthernetFunctionsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EthernetFunctions::~EthernetFunctions() &rArr; Socket::~Socket() &rArr; Socket::close() &rArr; WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::~Endpoint()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::~Socket()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_led)
</UL>
<P><STRONG><a name="[280]"></a>EthernetFunctions::~EthernetFunctions__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\main.o(i._ZN17EthernetFunctionsD1Ev), UNUSED)

<P><STRONG><a name="[1d7]"></a>TCPSocketConnection::is_connected()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnection12is_connectedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TCPSocketConnection::is_connected() &rArr; WIZnet_Chip::is_connected(int) &rArr; T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::is_connected(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::write(char*, int)
</UL>

<P><STRONG><a name="[1db]"></a>TCPSocketConnection::is_fin_received()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnection15is_fin_receivedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TCPSocketConnection::is_fin_received() &rArr; WIZnet_Chip::is_fin_received(int) &rArr; T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::is_fin_received(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1dc]"></a>TCPSocketConnection::receive(char*, int)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnection7receiveEPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = TCPSocketConnection::receive(char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d8]"></a>TCPSocketConnection::send_all(char*, int)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnection8send_allEPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = TCPSocketConnection::send_all(char*, int) &rArr; WIZnet_Chip::wait_writeable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::write(char*, int)
</UL>

<P><STRONG><a name="[1da]"></a>TCPSocketConnection::TCPSocketConnection()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnectionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TCPSocketConnection::TCPSocketConnection() &rArr; Socket::Socket() &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::Socket()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::EthernetFunctions()
</UL>

<P><STRONG><a name="[281]"></a>TCPSocketConnection::TCPSocketConnection__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\tcpsocketconnection.o(i._ZN19TCPSocketConnectionC1Ev), UNUSED)

<P><STRONG><a name="[1bd]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::WIZnet_Chip(mbed::SPI*, PinName, PinName)
</UL>

<P><STRONG><a name="[282]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[1b6]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, .\build\main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::WIZnet_Chip(mbed::SPI*, PinName, PinName)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
</UL>

<P><STRONG><a name="[83]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileHandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[82]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> FileHandle.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[1de]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[1e0]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[64]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[7a]"></a>mbed::SerialBase::interrupt_handler_asynch()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::SerialBase::interrupt_handler_asynch() &rArr; serial_irq_handler_asynch &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
</UL>

<P><STRONG><a name="[84]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[85]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1e5]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[283]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[1e9]"></a>mbed::InterruptIn::enable_irq()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn10enable_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::enable_irq() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[17b]"></a>mbed::InterruptIn::disable_irq()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn11disable_irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::disable_irq() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_interrupt()
</UL>

<P><STRONG><a name="[66]"></a>mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
</UL>
<P><STRONG><a name="[1ee]"></a>mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;) &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f0]"></a>mbed::InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mbed::InterruptIn::InterruptIn(PinName) &rArr; gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
</UL>

<P><STRONG><a name="[284]"></a>mbed::InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInC1E7PinName), UNUSED)

<P><STRONG><a name="[6c]"></a>mbed::InterruptIn::~InterruptIn()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::InterruptIn::~InterruptIn() &rArr; gpio_irq_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_led)
<LI> InterruptIn.o(.constdata__ZTVN4mbed11InterruptInE)
</UL>
<P><STRONG><a name="[285]"></a>mbed::InterruptIn::~InterruptIn__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed11InterruptInD1Ev), UNUSED)

<P><STRONG><a name="[1f4]"></a>mbed::mbed_fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._ZN4mbed11mbed_fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[1f5]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileHandle*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[1f6]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[79]"></a>mbed::SPI::irq_handler_asynch()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI18irq_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::irq_handler_asynch() &rArr; mbed::SPI::dequeue_transaction() &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>mbed::SPI::dequeue_transaction()</STRONG> (Thumb, 336 bytes, Stack size 120 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI19dequeue_transactionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::dequeue_transaction() &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
</UL>

<P><STRONG><a name="[87]"></a>mbed::SPI::lock()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::lock() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[86]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::write(int) &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[1f9]"></a>mbed::SPI::aquire()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI6aquireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[88]"></a>mbed::SPI::unlock()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::unlock() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[1cf]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::frequency(int) &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::WIZnetInterface(mbed::SPI*, PinName, PinName)
</UL>

<P><STRONG><a name="[1fe]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; mbed::SPI::aquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
</UL>

<P><STRONG><a name="[286]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[6d]"></a>mbed::SPI::~SPI()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPID1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SPI::~SPI()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_led)
<LI> SPI.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[287]"></a>mbed::SPI::~SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i._ZN4mbed3SPID1Ev), UNUSED)

<P><STRONG><a name="[200]"></a>mbed::Timer::stop()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5Timer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::stop() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::poll()
</UL>

<P><STRONG><a name="[18e]"></a>mbed::Timer::reset()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5Timer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::reset() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[18f]"></a>mbed::Timer::start()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5Timer5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::start() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[191]"></a>mbed::Timer::read_ms()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5Timer7read_msEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::poll()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[19f]"></a>mbed::Timer::Timer()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5TimerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::Timer::Timer() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::DNSClient(const char*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::DHCPClient()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[288]"></a>mbed::Timer::Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Timer.o)(i._ZN4mbed5TimerC1Ev), UNUSED)

<P><STRONG><a name="[1ac]"></a>mbed::Timer::~Timer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\tcpsocketserver.o(i._ZN4mbed5TimerD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[289]"></a>mbed::Timer::~Timer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\tcpsocketserver.o(i._ZN4mbed5TimerD1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>mbed::Serial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6Serial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[8a]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6Serial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1d1]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_SerialConnect_cpp_ebddc1ff
</UL>

<P><STRONG><a name="[28a]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[69]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.__sti___8_main_cpp_led)
<LI> serialconnect.o(i.__sti___17_SerialConnect_cpp_ebddc1ff)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[28b]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[179]"></a>mbed::Stream::getc()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_interrupt()
</UL>

<P><STRONG><a name="[96]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[207]"></a>mbed::Stream::putc(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8b]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[8d]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[90]"></a>mbed::Stream::size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[8e]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[8c]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[8f]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1d3]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
</UL>

<P><STRONG><a name="[97]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[204]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[28c]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[95]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Stream.o)(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[209]"></a>mbed::fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileHandle.o)(i._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[20f]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[20b]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[208]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[28d]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[98]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[28e]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[20e]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[210]"></a>mbed::FilePath::file()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[224]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[211]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[225]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[212]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[28f]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FilePath.o)(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[206]"></a>mbed::mbed_getc(std::__FILE*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._ZN4mbed9mbed_getcEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::mbed_getc(std::__FILE*) &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[188]"></a>Socket::set_blocking(bool, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\socket.o(i._ZN6Socket12set_blockingEbj))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[214]"></a>Socket::close()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\socket.o(i._ZN6Socket5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Socket::close() &rArr; WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::close(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::~Socket()
</UL>

<P><STRONG><a name="[1c5]"></a>Socket::Socket()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\socket.o(i._ZN6SocketC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Socket::Socket() &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::UDPSocket()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::TCPSocketConnection()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::TCPSocketServer()
</UL>

<P><STRONG><a name="[290]"></a>Socket::Socket__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\socket.o(i._ZN6SocketC1Ev), UNUSED)

<P><STRONG><a name="[192]"></a>Socket::~Socket()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\socket.o(i._ZN6SocketD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Socket::~Socket() &rArr; Socket::close() &rArr; WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::~EthernetFunctions()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::~DNSClient()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[291]"></a>Socket::~Socket__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\socket.o(i._ZN6SocketD1Ev), UNUSED)

<P><STRONG><a name="[215]"></a>dnsname::decode(int)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, .\build\dnsclient.o(i._ZN7dnsname6decodeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = dnsname::decode(int) &rArr;  dnsname::decode(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::decode(int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pico_string::append(const char*, int)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::decode(int)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::response(unsigned char*, int)
</UL>

<P><STRONG><a name="[216]"></a>dnsname::encode(int, char*)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, .\build\dnsclient.o(i._ZN7dnsname6encodeEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dnsname::encode(int, char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::query(unsigned char*, int, const char*)
</UL>

<P><STRONG><a name="[217]"></a>dnsname::dnsname(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN7dnsnameC1EPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dnsname::dnsname(unsigned char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::response(unsigned char*, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::query(unsigned char*, int, const char*)
</UL>

<P><STRONG><a name="[292]"></a>dnsname::dnsname__sub_object(unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN7dnsnameC1EPh), UNUSED)

<P><STRONG><a name="[218]"></a>dnsname::~dnsname()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN7dnsnameD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dnsname::~dnsname() &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::response(unsigned char*, int)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::query(unsigned char*, int, const char*)
</UL>

<P><STRONG><a name="[293]"></a>dnsname::~dnsname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN7dnsnameD1Ev), UNUSED)

<P><STRONG><a name="[1d4]"></a>Endpoint::get_address()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\endpoint.o(i._ZN8Endpoint11get_addressEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::confEndpoint(Endpoint&)
</UL>

<P><STRONG><a name="[18b]"></a>Endpoint::set_address(const char*, int)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, .\build\endpoint.o(i._ZN8Endpoint11set_addressEPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::readEndpoint(Endpoint&, unsigned char*)
</UL>

<P><STRONG><a name="[219]"></a>Endpoint::reset_address()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\endpoint.o(i._ZN8Endpoint13reset_addressEv))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
</UL>

<P><STRONG><a name="[221]"></a>Endpoint::get_port()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\endpoint.o(i._ZN8Endpoint8get_portEv))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::confEndpoint(Endpoint&)
</UL>

<P><STRONG><a name="[198]"></a>Endpoint::Endpoint()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\build\endpoint.o(i._ZN8EndpointC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Endpoint::Endpoint()
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::reset_address()
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::DHCPClient()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::TCPSocketConnection()
</UL>

<P><STRONG><a name="[294]"></a>Endpoint::Endpoint__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, .\build\endpoint.o(i._ZN8EndpointC1Ev), UNUSED)

<P><STRONG><a name="[19a]"></a>Endpoint::~Endpoint()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\endpoint.o(i._ZN8EndpointD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::~EthernetFunctions()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::~DHCPClient()
</UL>

<P><STRONG><a name="[295]"></a>Endpoint::~Endpoint__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\endpoint.o(i._ZN8EndpointD1Ev), UNUSED)

<P><STRONG><a name="[21a]"></a>DNSClient::poll()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\dnsclient.o(i._ZN9DNSClient4pollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = DNSClient::poll() &rArr; DNSClient::resolve(const char*) &rArr;  Endpoint::set_address(const char*, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::lookup(const char*)
</UL>

<P><STRONG><a name="[21c]"></a>DNSClient::query(unsigned char*, int, const char*)</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, .\build\dnsclient.o(i._ZN9DNSClient5queryEPhiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DNSClient::query(unsigned char*, int, const char*) &rArr; dnsname::dnsname(unsigned char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::~dnsname()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::dnsname(unsigned char*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::encode(int, char*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
</UL>

<P><STRONG><a name="[1a9]"></a>DNSClient::lookup(const char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN9DNSClient6lookupEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::poll()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
</UL>

<P><STRONG><a name="[21b]"></a>DNSClient::resolve(const char*)</STRONG> (Thumb, 142 bytes, Stack size 296 bytes, .\build\dnsclient.o(i._ZN9DNSClient7resolveEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = DNSClient::resolve(const char*) &rArr;  Endpoint::set_address(const char*, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::~Endpoint()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::query(unsigned char*, int, const char*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::UDPSocket()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::init()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::set_blocking(bool, unsigned)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::poll()
</UL>

<P><STRONG><a name="[21d]"></a>DNSClient::callback()</STRONG> (Thumb, 106 bytes, Stack size 552 bytes, .\build\dnsclient.o(i._ZN9DNSClient8callbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::~Endpoint()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::response(unsigned char*, int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::receiveFrom(Endpoint&, char*, int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::Endpoint()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::lookup(const char*)
</UL>

<P><STRONG><a name="[21e]"></a>DNSClient::response(unsigned char*, int)</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, .\build\dnsclient.o(i._ZN9DNSClient8responseEPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DNSClient::response(unsigned char*, int) &rArr; dnsname::decode(int) &rArr;  dnsname::decode(int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::~dnsname()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::dnsname(unsigned char*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsname::decode(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
</UL>

<P><STRONG><a name="[1a8]"></a>DNSClient::DNSClient(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN9DNSClientC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = DNSClient::DNSClient(const char*) &rArr; mbed::Timer::Timer() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
</UL>

<P><STRONG><a name="[296]"></a>DNSClient::DNSClient__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN9DNSClientC1EPKc), UNUSED)

<P><STRONG><a name="[80]"></a>DNSClient::~DNSClient()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN9DNSClientD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DNSClient::~DNSClient() &rArr; Socket::~Socket() &rArr; Socket::close() &rArr; WIZnet_Chip::close(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::~Socket()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::gethostbyname(const char*, unsigned*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dnsclient.o(.constdata__ZTV9DNSClient)
</UL>
<P><STRONG><a name="[297]"></a>DNSClient::~DNSClient__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\dnsclient.o(i._ZN9DNSClientD1Ev), UNUSED)

<P><STRONG><a name="[199]"></a>UDPSocket::receiveFrom(Endpoint&, char*, int)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, .\build\udpsocket.o(i._ZN9UDPSocket11receiveFromER8EndpointPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::readEndpoint(Endpoint&, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::callback()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
</UL>

<P><STRONG><a name="[220]"></a>UDPSocket::confEndpoint(Endpoint&)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, .\build\udpsocket.o(i._ZN9UDPSocket12confEndpointER8Endpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UDPSocket::confEndpoint(Endpoint&) &rArr; WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*) &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::get_port()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::get_address()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reg_wr_ip(unsigned short, unsigned char, const char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::sendTo(Endpoint&, char*, int)
</UL>

<P><STRONG><a name="[21f]"></a>UDPSocket::readEndpoint(Endpoint&, unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, .\build\udpsocket.o(i._ZN9UDPSocket12readEndpointER8EndpointPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = UDPSocket::readEndpoint(Endpoint&, unsigned char*) &rArr;  Endpoint::set_address(const char*, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::receiveFrom(Endpoint&, char*, int)
</UL>

<P><STRONG><a name="[18a]"></a>UDPSocket::bind(int)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\build\udpsocket.o(i._ZN9UDPSocket4bindEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UDPSocket::bind(int) &rArr; WIZnet_Chip::scmd(int, Command) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::new_socket()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setProtocol(int, Protocol)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[187]"></a>UDPSocket::init()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\udpsocket.o(i._ZN9UDPSocket4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UDPSocket::init() &rArr; WIZnet_Chip::setProtocol(int, Protocol) &rArr; void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::new_socket()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setProtocol(int, Protocol)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[18d]"></a>UDPSocket::sendTo(Endpoint&, char*, int)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, .\build\udpsocket.o(i._ZN9UDPSocket6sendToER8EndpointPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = UDPSocket::sendTo(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_writeable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::confEndpoint(Endpoint&)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::callback()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[186]"></a>UDPSocket::UDPSocket()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\udpsocket.o(i._ZN9UDPSocketC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = UDPSocket::UDPSocket() &rArr; Socket::Socket() &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::Socket()
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[298]"></a>UDPSocket::UDPSocket__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\udpsocket.o(i._ZN9UDPSocketC1Ev), UNUSED)

<P><STRONG><a name="[17e]"></a>std::strchr(char*, int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\w5500.o(i._ZSt6strchrPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::strchr(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_ip(const char*)
</UL>

<P><STRONG><a name="[93]"></a>thunk{-188} to mbed::Serial::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[92]"></a>thunk{-188} to mbed::Serial::_getc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = thunk{-188} to mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[91]"></a>thunk{-188} to mbed::Serial::_putc(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thunk{-188} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[94]"></a>thunk{-188} to mbed::Serial::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(i._ZThn188_N4mbed6Serial6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[193]"></a>operator delete (void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::~DNSClient()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[185]"></a>operator new(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSClient::resolve(const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[136]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\m_ws.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_atexit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_SerialConnect_cpp_ebddc1ff
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[81]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> FileHandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[d8]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[da]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_sdk_boot.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[23a]"></a>_rtc_localtime</STRONG> (Thumb, 224 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_mktime.o)(i._rtc_localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _rtc_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
</UL>

<P><STRONG><a name="[239]"></a>_rtc_mktime</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_mktime.o)(i._rtc_mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _rtc_mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[106]"></a>_sys_close</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[124]"></a>_sys_flen</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[125]"></a>_sys_istty</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[101]"></a>_sys_open</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[11c]"></a>_sys_read</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[120]"></a>_sys_seek</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_seek
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[128]"></a>_sys_write</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[226]"></a>attach_rtc</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(i.attach_rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = attach_rtc &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ea]"></a>core_util_critical_section_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_critical.o)(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[1ec]"></a>core_util_critical_section_exit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_critical.o)(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[177]"></a>error</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_error.o)(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::Socket()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endpoint::set_address(const char*, int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[df]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = exit &rArr;  fflush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[213]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fgetc.o)(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
</UL>

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
</UL>

<P><STRONG><a name="[22d]"></a>gpio_dir</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[22b]"></a>gpio_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[1f2]"></a>gpio_init_in</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_gpio.o)(i.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_init_in &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[1dd]"></a>gpio_init_out</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_gpio.o)(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_init_out &rArr; gpio_init &rArr; pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_led
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>

<P><STRONG><a name="[1ed]"></a>gpio_irq_disable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::disable_irq()
</UL>

<P><STRONG><a name="[1eb]"></a>gpio_irq_enable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
</UL>

<P><STRONG><a name="[1f3]"></a>gpio_irq_free</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_irq_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::~InterruptIn()
</UL>

<P><STRONG><a name="[1f1]"></a>gpio_irq_init</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = gpio_irq_init &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[1ef]"></a>gpio_irq_set</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;)
</UL>

<P><STRONG><a name="[22e]"></a>gpio_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[231]"></a>init_spi</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.init_spi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[232]"></a>init_uart</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_api.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[145]"></a>$Super$$main</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*) &rArr; WIZnetInterface::connect() &rArr; WIZnetInterface::IPrenew(int) &rArr; DHCPClient::setup(int) &rArr; Endpoint::set_address(const char*, int) &rArr; WIZnet_Chip::gethostbyname(const char*, unsigned*) &rArr; DNSClient::lookup(const char*) &rArr; DNSClient::callback() &rArr; UDPSocket::receiveFrom(Endpoint&, char*, int) &rArr; WIZnet_Chip::wait_readable(int, int, int) &rArr; mbed::Timer::read_ms() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_rtc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket::close()
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::fall(mbed::Callback&lang;void()&rang;)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::enable_irq()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::receive(char*, int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::is_fin_received()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketConnection::is_connected()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::write(char*, int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectServer(unsigned char*, WIZnetInterface*, const char*, const char*, const char*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::ConnectClient()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zeraVetor(char*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>mbed_assert_internal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_assert.o)(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attach_rtc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::unlock()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::lock()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::_irq_handler(unsigned, gpio_irq_event)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[228]"></a>mbed_die</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[233]"></a>mbed_error_printf</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_error_printf &rArr;  core_util_critical_section_enter (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[227]"></a>mbed_error_vfprintf</STRONG> (Thumb, 70 bytes, Stack size 144 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[144]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_sdk_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>mbed_sdk_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[22c]"></a>pin_function</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[230]"></a>pin_mode</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pin_mode &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[235]"></a>pinmap_merge</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_pinmap_common.o)(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[236]"></a>pinmap_peripheral</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_pinmap_common.o)(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[237]"></a>pinmap_pinout</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_pinmap_common.o)(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[9f]"></a>rtc_init</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = rtc_init &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtc_time.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>rtc_isenabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_isenabled))
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtc_time.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>rtc_read</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rtc_read &rArr; HAL_RTC_GetDate &rArr; HAL_RTC_GetTime &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_mktime
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtc_time.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>rtc_write</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/rtc_api.o(i.rtc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtc_write &rArr; HAL_RTC_SetDate &rArr; RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_localtime
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtc_time.o(.data)
</UL>
<P><STRONG><a name="[1e4]"></a>serial_baud</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1df]"></a>serial_getc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[1e7]"></a>serial_init</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = serial_init &rArr;  init_uart (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1e8]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[1e3]"></a>serial_irq_handler_asynch</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_irq_handler_asynch &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[1e1]"></a>serial_putc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_device.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[23d]"></a>serial_readable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_api.o(i.serial_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[23e]"></a>serial_writable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[1fc]"></a>spi_format</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = spi_format &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
</UL>

<P><STRONG><a name="[1fd]"></a>spi_frequency</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::aquire()
</UL>

<P><STRONG><a name="[23f]"></a>spi_get_clock_freq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/spi_api.o(i.spi_get_clock_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = spi_get_clock_freq &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[1ff]"></a>spi_init</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = spi_init &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[1f7]"></a>spi_irq_handler_asynch</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_irq_handler_asynch &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
</UL>

<P><STRONG><a name="[1fa]"></a>spi_master_transfer</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_master_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = spi_master_transfer &rArr; spi_master_start_asynch_transfer &rArr; HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[1fb]"></a>spi_master_write</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_master_write))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[242]"></a>ticker_irq_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_ticker_api.o)(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[201]"></a>ticker_read_us</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_ticker_api.o)(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ticker_read_us &rArr; update_present_time
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::stop()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::Timer()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::read_ms()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::start()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timer::reset()
</UL>

<P><STRONG><a name="[19c]"></a>time</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_rtc_time.o)(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = time &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::discover()
</UL>

<P><STRONG><a name="[52]"></a>timer_irq_handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/hal_tick_16b.o(i.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler &rArr; ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick_16b.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[7e]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>us_ticker_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[243]"></a>us_ticker_irq_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_us_ticker_api.o)(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[7c]"></a>us_ticker_read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/us_ticker_16b.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_set_interrupt &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_GenerateEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_wait_api_no_rtos.o)(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
</UL>

<P><STRONG><a name="[1b7]"></a>wait_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_wait_api_no_rtos.o)(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
</UL>

<P><STRONG><a name="[51]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1a2]"></a>T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, .\build\w5500.o(t._ZN11WIZnet_Chip4sregIhEET_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = T1 WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::is_fin_received(int)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::is_connected(int)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::new_socket()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::close(int)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
</UL>

<P><STRONG><a name="[1a4]"></a>void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1)</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, .\build\w5500.o(t._ZN11WIZnet_Chip4sregIhEEvitT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = void WIZnet_Chip::sreg&lang;unsigned char&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::close(int)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::reset()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::scmd(int, Command)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setProtocol(int, Protocol)
</UL>

<P><STRONG><a name="[1c2]"></a>T1 WIZnet_Chip::sreg&lang;unsigned&rang;(int, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, .\build\tcpsocketserver.o(t._ZN11WIZnet_Chip4sregIjEET_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = T1 WIZnet_Chip::sreg&lang;unsigned&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[1ab]"></a>T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, .\build\tcpsocketserver.o(t._ZN11WIZnet_Chip4sregItEET_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = T1 WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_writeable(int, int, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::wait_readable(int, int, int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::accept(TCPSocketConnection&)
</UL>

<P><STRONG><a name="[1b0]"></a>void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, .\build\tcpsocketserver.o(t._ZN11WIZnet_Chip4sregItEEvitT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = void WIZnet_Chip::sreg&lang;unsigned short&rang;(int, unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::send(int, const char*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::recv(int, char*, int)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::bind(int)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPSocketServer::bind(int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDPSocket::confEndpoint(Endpoint&)
</UL>

<P><STRONG><a name="[1c7]"></a>T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, .\build\wiznetinterface.o(t._ZN11WIZnet_Chip6reg_rdIjEET_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = T1 WIZnet_Chip::reg_rd&lang;unsigned&rang;(unsigned short) &rArr; WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_read(unsigned short, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getNetworkMask()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getIPAddress()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::getGateway()
</UL>

<P><STRONG><a name="[189]"></a>void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, .\build\dhcpclient.o(t._ZN11WIZnet_Chip6reg_wrIjEEvtT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = void WIZnet_Chip::reg_wr&lang;unsigned&rang;(unsigned short, T1) &rArr; WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short) &rArr; mbed::DigitalOut::operator =(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::spi_write(unsigned short, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnet_Chip::setip()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPClient::setup(int)
</UL>

<P><STRONG><a name="[20c]"></a>SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(FileBase.o)(t._ZN12SingletonPtrI13PlatformMutexEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[6a]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEEC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[299]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEEC1Ev), UNUSED)

<P><STRONG><a name="[78]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
</UL>
<P><STRONG><a name="[29a]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed11TransactionINS_3SPIEED1Ev), UNUSED)

<P><STRONG><a name="[6b]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[29b]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[9b]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[9a]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> InterruptIn.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[68]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(i._ZN4mbed6SerialD1Ev)
</UL>
<P><STRONG><a name="[29c]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(Serial.o)(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[61]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[67]"></a>CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(t._ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_)
</UL>
<P><STRONG><a name="[ae]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[b2]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\fz_ws.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__sti___8_main_cpp_led</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\build\main.o(i.__sti___8_main_cpp_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_led &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::InterruptIn::InterruptIn(PinName)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetFunctions::EthernetFunctions()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZnetInterface::WIZnetInterface(mbed::SPI*, PinName, PinName)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[146]"></a>can_irq</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/can_api.o(i.can_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>gpio_irq0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq0 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[70]"></a>gpio_irq1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq1 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[71]"></a>gpio_irq2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq2 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[72]"></a>gpio_irq3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq3 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[73]"></a>gpio_irq4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq4 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[74]"></a>gpio_irq5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq5 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[75]"></a>gpio_irq6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.gpio_irq6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_irq6 &rArr; handle_interrupt_in
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_interrupt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_irq_api.o(i.gpio_irq_init)
</UL>
<P><STRONG><a name="[22f]"></a>handle_interrupt_in</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/gpio_irq_api.o(i.handle_interrupt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = handle_interrupt_in
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq6
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq5
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq3
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq0
</UL>

<P><STRONG><a name="[234]"></a>stm_pin_PullConfig</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/pinmap.o(i.stm_pin_PullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm_pin_PullConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[157]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[159]"></a>RTC_WriteAlarmCounter</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.RTC_WriteAlarmCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_WriteAlarmCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[158]"></a>RTC_WriteTimeCounter</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_rtc.o(i.RTC_WriteTimeCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_WriteTimeCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>

<P><STRONG><a name="[56]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[5d]"></a>SPI_2linesRxISR_16BITCRC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_2linesRxISR_16BITCRC &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_16BIT)
</UL>
<P><STRONG><a name="[57]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[5e]"></a>SPI_2linesRxISR_8BITCRC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_2linesRxISR_8BITCRC &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.SPI_2linesRxISR_8BIT)
</UL>
<P><STRONG><a name="[58]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesTxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[59]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_2linesTxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[16e]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_CloseRxTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ISCRCErrorValid
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BITCRC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BITCRC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[173]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_CloseRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ISCRCErrorValid
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BITCRC
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BITCRC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[53]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[54]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[5f]"></a>SPI_RxISR_16BITCRC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_16BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_16BITCRC &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.SPI_RxISR_16BIT)
</UL>
<P><STRONG><a name="[55]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[60]"></a>SPI_RxISR_8BITCRC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_RxISR_8BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_8BITCRC &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.SPI_RxISR_8BIT)
</UL>
<P><STRONG><a name="[5a]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_TxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_TxISR_16BIT &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[5b]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_TxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_TxISR_8BIT &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[16f]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[5c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[16d]"></a>UART_SetConfig</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[240]"></a>spi_master_start_asynch_transfer</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/stm_spi_api.o(i.spi_master_start_asynch_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = spi_master_start_asynch_transfer &rArr; HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_IT
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[9d]"></a>__sti___17_SerialConnect_cpp_ebddc1ff</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\serialconnect.o(i.__sti___17_SerialConnect_cpp_ebddc1ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = __sti___17_SerialConnect_cpp_ebddc1ff &rArr; mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_baud &rArr; init_uart &rArr; error &rArr; mbed_error_vfprintf &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialconnect.o(.init_array)
</UL>
<P><STRONG><a name="[65]"></a>mbed::donothing()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(InterruptIn.o)(i._ZN4mbed9donothingEv))
<BR>[Address Reference Count : 2]<UL><LI> InterruptIn.o(i._ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE)
<LI> InterruptIn.o(i._ZN4mbed11InterruptInC1E7PinName)
</UL>
<P><STRONG><a name="[9e]"></a>__sti___7_SPI_cpp_ab1f1164</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SPI.o)(i.__sti___7_SPI_cpp_ab1f1164))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___7_SPI_cpp_ab1f1164 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SPI.o(.init_array)
</UL>
<P><STRONG><a name="[62]"></a>&lang;Func3&rang;</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i.<Func3>))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[63]"></a>mbed::donothing()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(SerialBase.o)(i._ZN4mbed9donothingEv))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[23b]"></a>schedule_interrupt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_ticker_api.o)(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = schedule_interrupt &rArr; update_present_time
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>

<P><STRONG><a name="[23c]"></a>update_present_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mbed/TARGET_NUCLEO_F103RB/TOOLCHAIN_ARM_STD/mbed.ar(mbed_ticker_api.o)(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_present_time
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[4d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_char.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
